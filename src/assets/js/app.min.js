/* eslint-disable */
window.onload = function () {

  fade(document.querySelector(".loader"));
  delayAndFade(document.querySelector("#preloader"), 350);

  $(function () {
    $(".side-navbar li a").on("click", function (b) {
      $(".collapse").collapse("hide")
    })
  });


  window.addEventListener("scroll", () => {
    console.log('scrrrrrrrrrrrr');
    if (window.scrollTop() > 350) {
      $(".go-top").fadeIn(100)
    } else {
      $(".go-top").fadeOut(200)
    }
  });

  // $(window).scroll(function () {
  //   if ($(this).scrollTop() > 350) {
  //     $(".go-top").fadeIn(100)
  //   } else {
  //     $(".go-top").fadeOut(200)
  //   }
  // });

  const goToTopBtn = document.querySelector(".go-top");
  goToTopBtn.addEventListener("click", (e) => {
    console.log('Go2DaMoon');

    e.preventDefault();
    $("html, body").animate({
      scrollTop: 0
    }, 800);
  })

  // $(".go-top").click(function (b) {
  //   b.preventDefault();
  //   $("html, body").animate({
  //     scrollTop: 0
  //   }, 800)
  // })

  $(window).resize(function () {
    var b = $(this).height() - $(".header").height() + $(".main-footer").height();
    $(".d-scroll").height(b)
  });
  $(window).resize();
  $(window).resize(function () {
    $(".auto-scroll").height($(window).height() - 130)
  });
  $(window).trigger("resize");
  $(".checkbox").click(function () {
    $(this).toggleClass("is-checked")
  });
  $("#check-all").change(function () {
    $("input:checkbox").prop("checked", $(this).prop("checked"))
  });
  $("a.remove").on("click", function (b) {
    b.preventDefault();
    $(this).parents(".col-remove").fadeOut(500)
  });
  $(".sidebar-scroll").niceScroll({
    cursorcolor: "transparent",
    cursorborder: "transparent",
    cursoropacitymax: 0,
    boxzoom: false,
    autohidemode: "hidden",
    cursorfixedheight: 80
  });
  $(".widget-scroll").niceScroll({
    railpadding: {
      top: 0,
      right: 3,
      left: 0,
      bottom: 0
    },
    scrollspeed: 100,
    zindex: "auto",
    autohidemode: "leave",
    cursorwidth: "4px",
    cursorcolor: "rgb$(52, 40, 104, 0.1)",
    cursorborder: "rgb$(52, 40, 104, 0.1)"
  });
  $(".table-scroll").niceScroll({
    railpadding: {
      top: 0,
      right: 0,
      left: 0,
      bottom: 0
    },
    scrollspeed: 100,
    zindex: "auto",
    autohidemode: "leave",
    cursorwidth: "4px",
    cursorcolor: "rgb$(52, 40, 104, 0.1)",
    cursorborder: "rgb$(52, 40, 104, 0.1)"
  });
  $(".offcanvas-scroll").niceScroll({
    railpadding: {
      top: 0,
      right: 2,
      left: 0,
      bottom: 0
    },
    scrollspeed: 100,
    zindex: "auto",
    hidecursordelay: 800,
    cursorwidth: "3px",
    cursorcolor: "rgb$(52, 40, 104, 0.1)",
    cursorborder: "rgb$(52, 40, 104, 0.1)",
    preservenativescrolling: true,
    boxzoom: false
  });
  $("#search").on("click", function (b) {
    b.preventDefault();
    $(".search-box").slideDown()
  });
  $(".dismiss").on("click", function () {
    $(".search-box").slideUp()
  });
  $(".dropdown").on("show.bs.dropdown", function (b) {
    $(this).find(".dropdown-menu").first().stop(true, true).slideDown(300)
  });
  $(".dropdown").on("hide.bs.dropdown", function (b) {
    $(this).find(".dropdown-menu").first().stop(true, true).slideUp(300)
  });
  $(".widget-options > .dropdown, .actions > .dropdown, .quick-actions > .dropdown").hover(function () {
    $(this).find(".dropdown-menu").stop(true, true).delay(100).fadeIn(350)
  }, function () {
    $(this).find(".dropdown-menu").stop(true, true).delay(100).fadeOut(350)
  });

  $(function () {
    $("#delay-modal").on("show.bs.modal", function () {
      var b = $(this);
      clearTimeout(b.dat$("hideInterval"));
      b.dat$("hideInterval", setTimeout(function () {
        b.modal("hide")
      }, 2500))
    })
  })
}

const fade = (fadeTarget) => {
  let fadeEffect = setInterval(function () {
    if (!fadeTarget.style.opacity) {
      fadeTarget.style.opacity = 1;
    }
    if (fadeTarget.style.opacity > 0) {
      fadeTarget.style.opacity -= 0.1;
    } else {
      clearInterval(fadeEffect);
    }
  }, 200);
}

const delayAndFade = (fadeTarget, timeout) => {
  setTimeout(() => {
    fade(fadeTarget);
  }, timeout)
}
